<!-- Validation failure messages -->
<% if @journey.errors.any? %>
<% @journey.errors.full_messages.each do |message| %>
<div class="alert alert-dismissable alert-danger">
  <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
  <%= message %>
</div>
<% end %>
<% end %>

<div class="row">
  <div class="col-md-8 col-md-offset-2">

    <!-- Main panel -->
    <div class="panel panel-default">

      <!-- Main panel heading -->
      <div class="panel-heading">
        <h3 class="panel-title">
          Create new journey
        </h3>
      </div>

      <!-- Main panel body -->
      <div class="panel-body">
        <form action="/create_journey" method="post">
          <!-- Hidden input for authenticity token to protect from forgery -->
          <input name="authenticity_token" type="hidden" value="<%= form_authenticity_token %>">

          <!-- Label and input for origin -->
          <div class="form-group">
            <label for="from" class="control-label">
              Origin
            </label>

            <input type="text" id="from" name="from" placeholder="Origin" class="form-control" value="<%= @journey.origin %>">
            <a id="from-link" href="#">Get my position</a>
          </div>

          <!-- Label and input for destination -->
          <div class="form-group">
            <label for="to" class="control-label">
              Destination
            </label>

            <input type="text" id="to" name="to" placeholder="Destination" class="form-control" value="<%= @journey.destination %>">
          </div>

          <!-- Label and input for capacity -->
          <div class="form-group">
            <label for="capacity" class="control-label">
              Seats
            </label>

            <input type="text" id="capacity" name="capacity" placeholder="Seats" class="form-control" value="<%= @journey.capacity %>">
          </div>

          <!-- Label and input for date -->
          <div class="form-group">
            <label for="datetimepicker" class="control-label">
              Date
            </label>

            <div class="form-group">
              <input type='text' class="form-control" id='datetimepicker' placeholder="Date" name="date" value="<%= @journey.date %>">
            </div>

          </div>

          <!-- Label and input for organizer_id -->
          <input type="hidden" id="organizer_id" name="organizer_id" placeholder="Organizer" class="form-control" value="<%= current_user.id %>">

          <button class="btn btn-success">
            Create Journey
          </button>
          or
          <a href="/journeys">Cancel</a>
        </form>
      </div>
    </div>
  </div>

  <!-- Script for datetimepicker format -->
  <script type="text/javascript">
  $(function () {
    $('#datetimepicker').datetimepicker({
      format: 'MMM D, h:mmA',
      sideBySide: true,
      stepping: '15'
    });
  });
  </script>

  <!-- Script for Google Maps autocomplete -->
  <script type="text/javascript">
  function initialize() {
    var input = document.getElementById('from');
    var autocomplete = new google.maps.places.Autocomplete(input);
  }
  google.maps.event.addDomListener(window, 'load', initialize);
  </script>

  <script type="text/javascript">
  function initialize() {
    var input2 = document.getElementById('to');
    var autocomplete2 = new google.maps.places.Autocomplete(input2);
  }
  google.maps.event.addDomListener(window, 'load', initialize);
  </script>


  <!-- Script for geocoding -->
  <script>
  function writeAddressName(latLng) {
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({
      "location": latLng
    },
    function(results, status) {
      if (status == google.maps.GeocoderStatus.OK)
      document.getElementById("address").innerHTML = results[0].formatted_address;
      else
      document.getElementById("error").innerHTML += "Unable to retrieve your address" + "<br />";
    });
  }

  function geolocationSuccess(position) {
    var userLatLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

    // Write the formatted address
    writeAddressName(userLatLng);
  }

  function geolocationError(positionError) {
    document.getElementById("error").innerHTML += "Error: " + positionError.message + "<br />";
  }

  function geolocateUser() {
    // If the browser supports the Geolocation API
    if (navigator.geolocation)
    {
      var positionOptions = {
        enableHighAccuracy: true,
        timeout: 10 * 1000 // 10 seconds
      };
      navigator.geolocation.getCurrentPosition(geolocationSuccess, geolocationError, positionOptions);
    }
    else
    document.getElementById("error").innerHTML += "Your browser doesn't support the Geolocation API";
  }

  window.onload = geolocateUser;

  function calculateRoute(from, to) {
    // Center initialized to Naples, Italy
    var myOptions = {
      zoom: 10,
      center: new google.maps.LatLng(40.84, 14.25),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    // Draw the map
    var mapObject = new google.maps.Map(document.getElementById("map"), myOptions);

    var directionsService = new google.maps.DirectionsService();
    var directionsRequest = {
      origin: from,
      destination: to,
      travelMode: google.maps.DirectionsTravelMode.DRIVING,
      unitSystem: google.maps.UnitSystem.METRIC
    };

    directionsService.route(
      directionsRequest,
      function(response, status)
      {
        if (status == google.maps.DirectionsStatus.OK)
        {
          new google.maps.DirectionsRenderer({
            map: mapObject,
            directions: response
          });
        }
        else
        $("#error").append("Unable to retrieve your route<br />");
      }
    );
  }

  $(document).ready(function() {
    // If the browser supports the Geolocation API
    if (typeof navigator.geolocation == "undefined") {
      $("#error").text("Your browser doesn't support the Geolocation API");
      return;
    }

    $("#from-link, #to-link").click(function(event) {
      event.preventDefault();
      var addressId = this.id.substring(0, this.id.indexOf("-"));

      navigator.geolocation.getCurrentPosition(function(position) {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({
          "location": new google.maps.LatLng(position.coords.latitude, position.coords.longitude)
        },
        function(results, status) {
          if (status == google.maps.GeocoderStatus.OK)
          $("#" + addressId).val(results[0].formatted_address);
          else
          $("#error").append("Unable to retrieve your address<br />");
        });
      },
      function(positionError){
        $("#error").append("Error: " + positionError.message + "<br />");
      },
      {
        enableHighAccuracy: true,
        timeout: 10 * 1000 // 10 seconds
      });
    });

    $("#calculate-route").submit(function(event) {
      event.preventDefault();
      calculateRoute($("#from").val(), $("#to").val());
    });
  });
  </script>
